using Asmerald.Columns;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Asmerald.Generate.Generators
{
    public class AsmeraldTableClassBuilder
    {
        public string Build(string nspace, TableGenerate table)
        {
            var sw = new StringWriter();
            IndentedTextWriter w = new IndentedTextWriter(sw);

            w.WriteLine("/*");
            w.WriteLine($"This file was automatically generated by {nameof(Asmerald)}.{nameof(Asmerald.Generate)} library / executable.");
            w.WriteLine("It is not recommened to make manual changes in this file as any changes to this file will be overwritten when the next generation happens.");
            w.WriteLine("In case you need modifications please refer to adjusting the generation process itself.");
            w.WriteLine($"This is possible by creating your own executable project and referencing or forking {nameof(Asmerald)}.{nameof(Asmerald.Generate)} library / executable.");
            w.WriteLine("*/");
            w.WriteLine();

            w.WriteLine($"using {nameof(System)};");
            w.WriteLine($"using {nameof(Asmerald)};");
            w.WriteLine($"using {nameof(Asmerald)}.{nameof(Asmerald.Columns)};");
            w.WriteLine();

            if (String.IsNullOrEmpty(nspace) == false)
            {
                w.WriteLine($"namespace {nspace}.{table.Database}");
                w.WriteLine("{");
                w.Indent++;
            }
            else
            {
                w.WriteLine($"namespace {table.Database}");
                w.WriteLine("{");
                w.Indent++;
            }

            if (String.IsNullOrEmpty(table.Schema) == false)
            {
                w.WriteLine($"public partial class {table.Schema}");
                w.WriteLine("{");
                w.Indent++;

                // Method to create an object of stored procedure
                w.WriteLine($"public static {table.Name_class} {table.Name}() => new {table.Name_class}();");
            }

            w.Write($"public class {table.Name_class} : {nameof(ITable)}");
            w.WriteLine("{");
            w.Indent++;

            // We make sure to always reference the full table name
            // This could be up to database.schema.table
            var tableNameParts = new List<string>();
            //if (String.IsNullOrEmpty(table.Database) == false) tableNameParts.Add(table.Database);
            if (String.IsNullOrEmpty(table.Schema) == false) tableNameParts.Add(table.Schema);
            tableNameParts.Add(table.Name);

            w.WriteLine($"string {nameof(ITable)}.{nameof(ITable.Name)}() => \"{String.Join('.', tableNameParts)}\";");

            // Methods to create columns
            foreach (var column in table.Columns)
            {
                w.WriteLine($"public {column.Name_class} {column.Name_method}() => new {column.Name_class}();");
            }

            // Static methods to create columns
            foreach (var column in table.Columns)
            {
                // We cannot have instance methods and static methods with same name and parameters
                // Thats why we use <ColumnName>() only for instance methods and for static methods we a little trick with optional parameter of tableAlias
                //w.WriteLine($"public static {column.Name_class} {column.Name_method}() => new {column.Name_class}();");
                w.WriteLine($"public static {column.Name_class} {column.Name_method}(string tableAlias = \"\") => new {column.Name_class}(tableAlias);");
            }

            foreach (var column in table.Columns)
            {
                w.WriteLine($"public class {column.Name_class} : {column.Type}<{table.Name_class}>, {nameof(ISelectColumn)}<{table.Name_class}>, ISelectColumnAlias<{table.Name_class}>");
                w.WriteLine("{");
                w.Indent++;

                w.WriteLine($"private readonly string _name = \"{column.Name}\";");
                w.WriteLine($"string {nameof(ISelectColumn)}.{nameof(ISelectColumn.Name)} => string.{nameof(String.IsNullOrEmpty)}(TableAlias) ? _name : $\"{{TableAlias}}.{{_name}}\";");
                w.WriteLine($"readonly string? TableAlias;");
                w.WriteLine($"public {column.Name_class}() {{ }}");
                w.WriteLine($"public {column.Name_class}(string tableAlias) {{ this.TableAlias = tableAlias; }}");
                w.WriteLine($"public override string Name() => String.IsNullOrEmpty(TableAlias) ? _name : $\"{{TableAlias}}.{{_name}}\";");
                w.WriteLine($"public override ISelectColumnAlias<{table.Name_class}> As(string name) => new AliasColumn<{table.Name_class}>(this, name);");
                w.WriteLine($"public override {nameof(ISelectColumn)}<{table.Name_class}> Count() => new CountColumn<{table.Name_class}>(this);");
                w.Indent--;
                w.WriteLine("}");
            }

            w.Indent--;
            w.WriteLine("}");

            if (String.IsNullOrEmpty(table.Schema) == false)
            {
                w.Indent--;
                w.WriteLine("}");
            }

            w.Indent--;
            w.WriteLine("}");

            w.Flush();
            return sw.ToString();
        }
    }
}
