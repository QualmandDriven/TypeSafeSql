using Asmerald.Columns;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Asmerald;

namespace Asmerald.Generate.Generators
{
    public class AsmeraldFunctionClassBuilder
    {
        private class TestFunction : Functions.IFunction<int>
        {
            private readonly int Para1;
            private readonly string Para2;

            public TestFunction(int para1, string para2)
            {
                Para1 = para1;
                Para2 = para2;

                this.Greater(2);
            }

            public string Name() => "Test";

            public List<(string, object)> GetParameters()
            {
                return new List<(string, object)>()
                {
                    ("Para1", Para1),
                    ("Para2", Para2)
                };
            }
        }

        public string Build(string nspace, FunctionGenerate func)
        {
            var sw = new StringWriter();
            IndentedTextWriter w = new IndentedTextWriter(sw);

            w.WriteLine("/*");
            w.WriteLine($"This file was automatically generated by {nameof(Asmerald)}.{nameof(Asmerald.Generate)} library / executable.");
            w.WriteLine("It is not recommened to make manual changes in this file as any changes to this file will be overwritten when the next generation happens.");
            w.WriteLine("In case you need modifications please refer to adjusting the generation process itself.");
            w.WriteLine($"This is possible by creating your own executable project and referencing or forking {nameof(Asmerald)}.{nameof(Asmerald.Generate)} library / executable.");
            w.WriteLine("*/");
            w.WriteLine();

            w.WriteLine($"using {nameof(System)};");
            w.WriteLine($"using {nameof(Asmerald)};");
            w.WriteLine($"using {nameof(Asmerald)}.{nameof(Asmerald.Columns)};");
            w.WriteLine();

            if (String.IsNullOrEmpty(nspace) == false)
            {
                w.WriteLine($"namespace {nspace}");
                w.WriteLine("{");
                w.Indent++;
            }


            var ctorParas = func.Parameters.Select(p => $"{p.Type} {p.Name_class.FirstCharToLower()}");

            if (String.IsNullOrEmpty(func.Schema) == false)
            {
                w.WriteLine($"public partial class {func.Schema}");
                w.WriteLine("{");
                w.Indent++;

                // Method to create an object of stored procedure
                w.WriteLine($"public static {func.Name_class} {func.Name}({String.Join(", ", ctorParas)}) => new {func.Name_class}({String.Join(", ", func.Parameters.Select(p => p.Name_class.FirstCharToLower()))});");
            }

            w.WriteLine($"public class {func.Name_class} : {nameof(Asmerald)}.{nameof(Asmerald.Functions)}.{nameof(Asmerald.Functions.IFunction)}<{func.Type}>");
            w.WriteLine("{");
            w.Indent++;

            w.WriteLine($"public string Name() => \"{func.Name}\";");
            w.WriteLine();

            foreach (var para in func.Parameters)
            {
                w.WriteLine($"private readonly {para.Type} {para.Name_class};");
            }

            w.WriteLine();
            w.WriteLine($"public {func.Name_class}({String.Join(", ", ctorParas)})");
            w.WriteLine("{");
            w.Indent++;

            foreach (var p in func.Parameters)
            {
                w.WriteLine($"this.{p.Name_class} = {p.Name_class.FirstCharToLower()};");
            }

            w.Indent--;
            w.WriteLine("}");

            w.WriteLine();
            w.WriteLine("public List<(string, object)> GetParameters()");
            w.WriteLine("{");
            w.Indent++;

            w.WriteLine("return new List<(string, object)>()");
            w.WriteLine("{");
            w.Indent++;

            for (int i = 0; i < func.Parameters.Count; i++)
            {
                w.Write($"(\"{func.Parameters[i].Name}\", {func.Parameters[i].Name_class})");
                if(i < func.Parameters.Count - 1)
                {
                    w.Write(",");
                }
                w.WriteLine();
            }

            w.Indent--;
            w.WriteLine("};");

            w.Indent--;
            w.WriteLine("}");

            w.Indent--;
            w.WriteLine("}");

            if (String.IsNullOrEmpty(func.Schema) == false)
            {
                w.Indent--;
                w.WriteLine("}");
            }

            if (String.IsNullOrEmpty(nspace) == false)
            {
                w.Indent--;
                w.WriteLine("}");
            }

            w.Flush();
            return sw.ToString();
        }
    }
}
