using System;
using System.Collections.Generic;
using System.Text;
using TypeProofSql.Columns;
using TypeProofSql.Statements;
using TypeProofSql.QueryBuilders;

namespace TypeProofSql.{{ nspace }}.Statements
{
    public class {{ class_gen.full_class_name }} : {% if class_gen.inherit_class_name != "" %} {{ class_gen.inherit_class_name }} {% else %}IStatement{% endif %}
        {% for gen in class_gen.generics %}where {{ gen }} : ITable {% endfor %}
    {
        public IQueryBuilder QueryBuilder { get; private set; }
    
        {% for prop in class_gen.properties %}
            {% if prop.is_list %}
            public List<{{ prop.class_name }}> {{ prop.prop }} { get; private set; } = new List<{{ prop.class_name }}>();
            {% else %}
            public {{ prop.class_name }} {{ prop.prop }} { get; private set; }
            {% endif %}
        {% endfor %}

        public {{ class_gen.class_name }}(
            IQueryBuilder queryBuilder
            {% for prop in class_gen.properties %}, {%if prop.is_list %} IEnumerable<{{ prop.class_name }}> {% else %} {{ prop.class_name }} {% endif %} {{ prop.para }}{% endfor %})
                {% if class_gen.inherit_class_name != "" %}: base(queryBuilder {% for prop in class_gen.properties %}, {{ prop.para }}{% endfor %}){% endif %}
        {
            {% if class_gen.inherit_class_name == "" %}
            this.QueryBuilder = queryBuilder;
            {% for prop in class_gen.properties %}{% if prop.is_list %}this.{{ prop.prop }}.AddRange({{ prop.para }});{% else %}this.{{ prop.prop }} = {{ prop.para }};{% endif %}{% endfor %}

            this.QueryBuilder.AddStatment(this);
            {% endif %}
        }
    }
}