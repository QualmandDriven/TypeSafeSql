sqlDialect=SQLite
;Directory=C:\Users\Alexander\Source\Repos\TypeSafeSql\src\TypeProofSql
Directory=..\..\..\..\TypeProofSql
TestDirectory=..\..\..\..\TypeProofSql.Test

[COMMON_CLASSES]
SQLiteDSLContext = SQLiteDSLContext
ConditionalGroupStatement = ConditionalGroupStatement
ConditionalStatement = ConditionalStatement

[CLASSES]
Not = Not

With = With
WithTable = WithTable(ITable table, ISelectColumn[] selectColumns)
WithTable<T> = WithTable<T>(ISelectColumn[] selectColumns) : WithTable(new T(), selectColumns)
WithTableAdditional = WithTableAdditional(ITable table, ISelectColumn[] selectColumns)
WithTableAdditional<T> = WithTableAdditional<T>(ISelectColumn[] selectColumns) : WithTableAdditional(new T(), selectColumns)
Recursive = Recursive(ITable table, ISelectColumn[] selectColumns)
Recursive<T> = Recursive<T>(ISelectColumn[] selectColumns) : Recursive(new T(), selectColumns)

Materialized = Materialized(IQueryBuilder subQuery)

As = As
WithAs = WithAs : As
WithNot = WithNot() : Not()
AsSelect = AsSelect(IQueryBuilder subQuery)
WithAsSelect = WithAsSelect(ITable table, IQueryBuilder subQuery)
WithAsSelect<T> = WithAsSelect<T>(IQueryBuilder subQuery) : WithAsSelect(new T(), subQuery)


All = All

Select = Select
SelectColumns = SelectColumns(ISelectColumn[] columns)
Distinct = Distinct
DistinctColumns = DistinctColumns(ISelectColumn[] columns)

From = From(ITable table)
FromSubQuery = FromSubQuery(IQueryBuilder subQueryBuilder, ITable table)
From<T> = From<T>() : From(new T())
FromSubQuery<T> = FromSubQuery<T>(IQueryBuilder subQueryBuilder) : FromSubQuery(subQueryBuilder, new T())

SelectFrom<T> = SelectFrom<T>() : From<T>()
SelectFromSubQuery<T> = SelectFromSubQuery<T>(IQueryBuilder subQueryBuilder) : FromSubQuery<T>(subQueryBuilder)

;TableAs = TableAs(string alias)

Join = Join(ITable left, ITable right)
Join<T, J> = Join<T, J>(T left, J right) : Join(left, right)
JoinSubQuery = JoinSubQuery(IQueryBuilder subQueryBuilder)
JoinAs = JoinAs(string alias)
;ConditionalJoin<T, J> = ConditionalJoin<T, J>((ISelectColumn<T> col1, ISelectColumn<J> col2)[] on) : Join<T, J>(new T(), new J())
;NonConditionalJoin = NonConditionalJoin(ITable left, ITable right) : Join(left, right)
;NonConditionalJoin<T, J> = NonConditionalJoin<T, J>() : NonConditionalJoin(new T(), new J())
;CrossJoin<T, J> = CrossJoin<T, J>() : NonConditionalJoin<T, J>()
;FullOuterJoin<T, J> = FullOuterJoin<T, J>((ISelectColumn<T> col1, ISelectColumn<J> col2)[] on) : ConditionalJoin<T, J>(on)
;InnerJoin<T, J> = InnerJoin<T, J>((ISelectColumn<T> col1, ISelectColumn<J> col2)[] on) : ConditionalJoin<T, J>(on)
;LeftOuterJoin<T, J> = LeftOuterJoin<T, J>((ISelectColumn<T> col1, ISelectColumn<J> col2)[] on) : ConditionalJoin<T, J>(on)
;RightOuterJoin<T, J> = RightOuterJoin<T, J>((ISelectColumn<T> col1, ISelectColumn<J> col2)[] on) : ConditionalJoin<T, J>(on)
ConditionalJoin = ConditionalJoin(ITable t, ITable j) : Join(t, j)
ConditionalJoin<T, J> = ConditionalJoin<T, J>() : Join<T, J>(new T(), new J())
NonConditionalJoin = NonConditionalJoin(ITable left, ITable right) : ConditionalJoin(left, right)
NonConditionalJoin<T, J> = NonConditionalJoin<T, J>() : NonConditionalJoin(new T(), new J())
CrossJoin = CrossJoin(ITable t, ITable j) : NonConditionalJoin(t, j)
CrossJoin<T, J> = CrossJoin<T, J>() : CrossJoin(new T(), new J())
FullOuterJoin = FullOuterJoin(ITable t, ITable j) : ConditionalJoin(t, j)
FullOuterJoin<T, J> = FullOuterJoin<T, J>() : FullOuterJoin(new T(), new J())
InnerJoin = InnerJoin(ITable t, ITable j) : ConditionalJoin(t, j)
InnerJoin<T, J> = InnerJoin<T, J>() : InnerJoin(new T(), new J())
LeftOuterJoin = LeftOuterJoin(ITable t, ITable j) : ConditionalJoin(t, j)
LeftOuterJoin<T, J> = LeftOuterJoin<T, J>() : LeftOuterJoin(new T(), new J())
RightOuterJoin = RightOuterJoin(ITable t, ITable j) : ConditionalJoin(t, j)
RightOuterJoin<T, J> = RightOuterJoin<T, J>() : RightOuterJoin(new T(), new J())

On = On(ITable tleft, ITable tright, ISelectColumn left, ISelectColumn right)
OnMulti = OnMulti(ITable tLeft, ITable tRight, (ISelectColumn left, ISelectColumn right)[] on)
On<T, J> = On<T, J>(ISelectColumn<T> left, ISelectColumn<J> right) : On(new T(), new J(), left, right)
OnMulti<T, J> = OnMulti<T, J>((ISelectColumn<T> left, ISelectColumn<J> right)[] on) : OnMulti(new T(), new J(), on)

WhereGroup = WhereGroup(ConditionalGroupStatement groupExpr)
Where = Where(ConditionalExpression conditionalExpression)
WhereMulti = WhereMulti(List<ConditionalStatements> conditionalStatements)

SelectWhereGroup = SelectWhereGroup(ConditionalGroupStatement groupExpr) : WhereGroup(groupExpr)
SelectWhere = SelectWhere(ConditionalExpression conditionalExpression) : Where(conditionalExpression)
SelectWhereMulti = SelectWhereMulti(List<ConditionalStatements> conditionalStatements) : WhereMulti(conditionalStatements)

And = And(ConditionalExpression conditionalExpression) : Conditional(conditionalExpression)
AndGroup = AndGroup(ConditionalExpression conditionalExpression) : ConditionalGroup(conditionalExpression)
Or = Or(ConditionalExpression conditionalExpression) : Conditional(conditionalExpression)
OrGroup = OrGroup(ConditionalExpression conditionalExpression) : ConditionalGroup(conditionalExpression)

Having = Having(ConditionalExpression conditionalExpression) : ConditionalGroup(conditionalExpression)

GroupBy = GroupBy(IColumn[] groupByColumns)
OrderBy = OrderBy(IOrderByColumn[] orderByColumns)
Collate = Collate
Asc = Asc
Desc = Desc
Nulls = Nulls
First = First
Last = Last

Limit = Limit(int limit)
Offset = Offset(int offset)

Insert = Insert
Replace = Replace
InsertReplace = InsertReplace() : Replace()
InsertOr = InsertOr
Abort = Abort
InsertAbort = InsertAbort() : Abort()
Fail = Fail
InsertFail = InsertFail() : Fail()
Ignore = Ignore
InsertIgnore = InsertIgnore() : Ignore()
Rollback = Rollback
InsertRollback = InsertRollback() : Rollback()
Into = Into(ITable table)
Into<T> = Into<T>() : Into(new T())
IntoAs = IntoAs(string alias)

InsertSelect = InsertSelect(ISelectColumn[] columns) : SelectColumns(columns)
InsertSelect<T> = InsertSelect<T>(ISelectColumn<T>[] columns) : InsertSelect(columns)
InsertValues = InsertValues(ValueExpression[] valueExpressions)

Default = Default
DefaultValues = DefaultValues

Update = Update(ITable table)
Update<T> = Update<T>() : Update(new T())

UpdateSet = UpdateSet(ITable table, ValueExpression[] valueExpressions) : Set(valueExpressions)
UpdateSet<T> = UpdateSet<T>(ValueExpression[] valueExpressions) : UpdateSet(new T(), valueExpressions)
UpdateOr = UpdateOr(ITable table)
UpdateOr<T> = UpdateOr<T>() : UpdateOr(new T())

UpdateAbort = UpdateAbort(ITable table) : Abort()
UpdateAbort<T> = UpdateAbort<T>() : UpdateAbort(new T())
UpdateFail = UpdateFail(ITable table) : Fail()
UpdateFail<T> = UpdateFail<T>() : UpdateAbort(new T())
UpdateIgnore = UpdateIgnore(ITable table) : Ignore()
UpdateIgnore<T> = UpdateIgnore<T>() : UpdateIgnore(new T())
UpdateReplace = UpdateReplace(ITable table) : Replace()
UpdateReplace<T> = UpdateReplace<T>() : UpdateReplace(new T())
UpdateRollback = UpdateRollback(ITable table) : Rollback()
UpdateRollback<T> = UpdateRollback<T>() : UpdateRollback(new T())

;UpdateFrom = UpdateFrom(ITable table) : From(table)
UpdateFrom<T> = UpdateFrom<T>() : From(new T())
UpdateFromSubQuery<T> = UpdateFromSubQuery<T>(IQueryBuilder subQueryBuilder) : FromSubQuery(subQueryBuilder, new T())

UpdateWhere = UpdateWhere(ConditionalExpression conditionalExpression) : Where(conditionalExpression)
UpdateWhereGroup = UpdateWhereGroup(ConditionalGroupStatement groupExpr) : WhereGroup(groupExpr)
UpdateWhereMulti = UpdateWhereMulti(List<ConditionalStatements> conditionalStatements) : WhereMulti(conditionalStatements)

UpdateConditionalJoin<T, J> = UpdateConditionalJoin<T, J>() : ConditionalJoin<T, J>()

Conflict = Conflict

UpsertOn = UpsertOn
UpsertConflict = UpsertConflict() : Conflict()
UpsertConflictSelect = UpsertConflictSelectColumns(ISelectColumn[] columns) : SelectColumns(columns)
UpsertDo = UpsertDo
UpsertNothing = UpsertNothing
UpsertUpdate = UpsertUpdate
UpsertSet = UpsertSet(ValueExpression[] valueExpressions) : Set(valueExpressions)
UpsertWhere = UpsertWhere(ConditionalExpression conditionalExpression) : Where(conditionalExpression)
UpsertWhereGroup = UpsertWhereGroup(ConditionalGroupStatement groupExpr) : WhereGroup(groupExpr)
UpsertWhereMulti = UpsertWhereMulti(List<ConditionalStatements> conditionalStatements) : WhereMulti(conditionalStatements)
UpsertOn = UpsertOn

Returning = Returning
ReturningSelect = ReturningSelect(ISelectColumn[] columns) : SelectColumns(columns)
ReturningSelect<T> = ReturningSelect<T>(ISelectColumn<T>[] columns) : SelectColumns(columns)
ReturningAll = ReturningAll

Delete = Delete
DeleteFrom = DeleteFrom(ITable table) : From(table)
DeleteFrom<T> = DeleteFrom<T>() : From<T>()
DeleteWhere = DeleteWhere(ConditionalExpression conditionalExpression) : Where(conditionalExpression)
DeleteWhereGroup = DeleteWhereGroup(ConditionalGroupStatement groupExpr) : WhereGroup(groupExpr)
DeleteWhereMulti = DeleteWhereMulti(List<ConditionalStatements> conditionalStatements) : WhereMulti(conditionalStatements)

Set = Set(ValueExpression[] valueExpressions)
Value = Value(ValueExpression[] valueExpressions)

Compound = Compound(IQueryBuilder subQueryBuilder)
Union = Union(IQueryBuilder subQueryBuilder) : Compound(subQueryBuilder)
UnionAll = UnionAll(IQueryBuilder subQueryBuilder) : Compound(subQueryBuilder)
Intersect = Intersect(IQueryBuilder subQueryBuilder) : Compound(subQueryBuilder)
Except = Except(IQueryBuilder subQueryBuilder) : Compound(subQueryBuilder)